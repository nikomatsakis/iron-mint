#!/bin/bash
# Iron Mint maintenance script
# Simplifies common package management tasks

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
IRON_MINT_DIR="$(dirname "$SCRIPT_DIR")"

show_help() {
    cat << EOF
Iron Mint - Package Management Made Simple

USAGE:
    iron-mint <command> [options]

COMMANDS:
    install            Install Iron Mint on this system
    uninstall          Remove Iron Mint from this system
    
    add <package>       Add a package locally (just for you)
    remove <package>    Remove a local package
    list               Show all installed packages
    
    update             Update to latest Iron Mint packages
    sync               Pull latest Iron Mint changes and update packages
    rebuild            Rebuild Iron Mint after editing flake.nix
    
    edit               Add a package to Iron Mint itself (opens editor)
    
    status             Show current Iron Mint status
    help               Show this help

EXAMPLES:
    iron-mint install              # Install Iron Mint on new system
    iron-mint uninstall            # Remove Iron Mint completely
    iron-mint add docker           # Add docker locally
    iron-mint remove docker        # Remove docker
    iron-mint sync                 # Pull git changes + update packages
    iron-mint edit                 # Add packages to Iron Mint itself
    iron-mint rebuild              # Rebuild after editing flake.nix

EOF
}

add_package() {
    local package="$1"
    if [[ -z "$package" ]]; then
        echo "‚ùå Error: Package name required"
        echo "Usage: iron-mint add <package>"
        exit 1
    fi
    
    # Add nixpkgs# prefix if not specified
    if [[ "$package" != *"#"* ]]; then
        package="nixpkgs#$package"
    fi
    
    echo "üì¶ Adding package: $package"
    nix profile install "$package"
    echo "‚úÖ Package added successfully!"
}

remove_package() {
    local package="$1"
    if [[ -z "$package" ]]; then
        echo "‚ùå Error: Package name required"
        echo "Usage: iron-mint remove <package>"
        exit 1
    fi
    
    echo "üóëÔ∏è  Removing package: $package"
    nix profile remove ".*$package.*"
    echo "‚úÖ Package removed successfully!"
}

list_packages() {
    echo "üìã Installed packages:"
    echo ""
    nix profile list
}

update_iron_mint() {
    echo "üîÑ Updating Iron Mint packages..."
    cd "$IRON_MINT_DIR"
    nix profile upgrade iron-mint
    echo "‚úÖ Iron Mint packages updated!"
}

sync_iron_mint() {
    echo "üîÑ Syncing with latest Iron Mint..."
    cd "$IRON_MINT_DIR"
    
    echo "üì• Pulling latest changes..."
    git pull
    
    echo "üì¶ Updating packages..."
    nix profile upgrade iron-mint
    
    echo "‚úÖ Sync complete!"
}

edit_iron_mint() {
    echo "‚úèÔ∏è  Opening Iron Mint flake for editing..."
    echo ""
    echo "To add a package to Iron Mint:"
    echo "1. Find the 'paths = with pkgs; [' section"
    echo "2. Add your package to the list"
    echo "3. Save and exit"
    echo "4. Run 'iron-mint rebuild' to apply changes"
    echo ""
    
    cd "$IRON_MINT_DIR"
    ${EDITOR:-vim} flake.nix
}

rebuild_iron_mint() {
    echo "üî® Rebuilding Iron Mint packages..."
    cd "$IRON_MINT_DIR"
    
    if git status --porcelain | grep -q .; then
        echo "üìù Local changes detected - rebuilding from working directory"
    fi
    
    echo "üì¶ Upgrading profile..."
    nix profile upgrade iron-mint
    
    echo "‚úÖ Rebuild complete!"
    echo "üí° New packages will be available in new terminal sessions"
}

install_iron_mint() {
    echo "üöÄ Installing Iron Mint Development Environment..."
    
    # Detect OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    else
        echo "‚ùå Unsupported OS: $OSTYPE"
        exit 1
    fi
    
    echo "üì± Detected OS: $OS"
    
    # Check shell
    current_shell=$(basename "$SHELL")
    echo "üêö Detected shell: $current_shell"
    
    if [[ "$current_shell" != "zsh" && "$current_shell" != "bash" ]]; then
        echo "‚ö†Ô∏è  Warning: Iron Mint is designed for zsh or bash"
        echo "   Your current shell is: $SHELL"
        echo "   Iron Mint may not work correctly with other shells."
        read -p "   Continue anyway? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Setup cancelled."
            exit 1
        fi
    fi
    
    # Install Nix if not present
    if ! command -v nix &> /dev/null; then
        echo "üì¶ Installing Nix with Determinate Systems installer..."
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
        
        # Source nix environment
        if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
            source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        elif [ -f ~/.nix-profile/etc/profile.d/nix.sh ]; then
            source ~/.nix-profile/etc/profile.d/nix.sh
        fi
    else
        echo "‚úÖ Nix already installed"
    fi
    
    # Enable flakes
    echo "üîß Ensuring Nix flakes are enabled..."
    mkdir -p ~/.config/nix
    if ! grep -q "experimental-features.*flakes" ~/.config/nix/nix.conf 2>/dev/null; then
        echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    fi
    
    # Clone or update iron-mint
    if [ -d ~/dev/iron-mint ]; then
        echo "üîÑ Updating existing iron-mint..."
        cd ~/dev/iron-mint
        git pull
    else
        echo "üìÅ Cloning iron-mint..."
        mkdir -p ~/dev
        git clone https://github.com/nikomatsakis/iron-mint.git ~/dev/iron-mint
        cd ~/dev/iron-mint
    fi
    
    # Set up dotfiles
    echo "üè† Setting up dotfiles..."
    nix build .#dotfiles
    bash ./result/bin/setup-dotfiles
    
    # Install Iron Mint tools
    echo ""
    echo "üì¶ Installing Iron Mint tools..."
    nix profile install .
    
    echo ""
    echo "‚úÖ Iron Mint development environment installed successfully!"
    echo ""
    echo "üí° To activate in current session:"
    echo "   source ~/.${current_shell}rc"
    echo ""
    echo "üöÄ New terminal sessions will automatically have Iron Mint configuration"
}

uninstall_iron_mint() {
    echo "üóëÔ∏è  Iron Mint Uninstaller"
    echo ""
    
    # List available backups
    backup_dirs=($(ls -1d ~/.dotfiles-backup-* 2>/dev/null | sort -r))
    
    if [ ${#backup_dirs[@]} -eq 0 ]; then
        echo "‚ùå No backup directories found."
        echo "   Cannot restore original configuration."
        echo "   You may need to manually remove Iron Mint lines from your RC files."
        exit 1
    fi
    
    echo "üìã Available backups:"
    echo ""
    for i in "${!backup_dirs[@]}"; do
        dir="${backup_dirs[$i]}"
        timestamp=$(basename "$dir" | sed 's/.*-backup-//')
        date_formatted=$(date -d "${timestamp:0:8} ${timestamp:9:2}:${timestamp:11:2}:${timestamp:13:2}" 2>/dev/null || echo "$timestamp")
        echo "  $((i+1)). $date_formatted"
        
        # Show what's in this backup
        if [ -f "$dir/.zshrc" ]; then echo "      - .zshrc"; fi
        if [ -f "$dir/.bashrc" ]; then echo "      - .bashrc"; fi
        if [ -f "$dir/.vimrc" ]; then echo "      - .vimrc"; fi
        if [ -f "$dir/.gitconfig" ]; then echo "      - .gitconfig"; fi
        echo ""
    done
    
    echo -n "Select backup to restore (1-${#backup_dirs[@]}) or 'q' to quit: "
    read -r choice
    
    if [[ "$choice" == "q" ]]; then
        echo "üëã Uninstall cancelled."
        exit 0
    fi
    
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#backup_dirs[@]}" ]; then
        echo "‚ùå Invalid choice."
        exit 1
    fi
    
    selected_backup="${backup_dirs[$((choice-1))]}"
    echo ""
    echo "üîÑ Restoring from: $selected_backup"
    
    # Restore files
    for file in .zshrc .bashrc .vimrc .gitconfig; do
        if [ -f "$selected_backup/$file" ]; then
            if [ -s "$selected_backup/$file" ]; then
                echo "   ‚úÖ Restoring $file"
                cp "$selected_backup/$file" ~/"$file"
            else
                echo "   üóëÔ∏è  Removing $file (was created by Iron Mint)"
                rm -f ~/"$file"
            fi
        fi
    done
    
    # Remove Iron Mint packages from profile
    echo ""
    echo "üì¶ Removing Iron Mint packages..."
    nix profile remove '.*iron-mint.*' 2>/dev/null || echo "   No Iron Mint packages found in profile"
    
    echo ""
    echo "‚úÖ Configuration restored!"
    echo "üí° Note: Iron Mint directory still exists at ~/dev/iron-mint"
    echo "   To fully remove Iron Mint:"
    echo "   - Remove the directory: rm -rf ~/dev/iron-mint"
    echo "   - Uninstall Nix if desired (see Nix documentation)"
}

show_status() {
    echo "üìä Iron Mint Status"
    echo ""
    
    echo "üìÅ Location: $IRON_MINT_DIR"
    echo "üêö Shell: $(basename "$SHELL")"
    
    if [ -d "$IRON_MINT_DIR/.git" ]; then
        cd "$IRON_MINT_DIR"
        if git status --porcelain | grep -q .; then
            echo "üîß Local changes: Yes"
        else
            echo "‚úÖ Local changes: None"
        fi
        
        local current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
        local commits_ahead=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo "0")
        echo "üå≥ Branch: $current_branch"
        if [[ "$commits_ahead" -gt 0 ]]; then
            echo "‚ö° Commits ahead: $commits_ahead"
        fi
    else
        echo "‚ùå Not a git repository"
    fi
    
    echo ""
    echo "üì¶ Iron Mint packages installed:"
    nix profile list | grep iron-mint || echo "   None found"
}

# Main command dispatcher
case "${1:-help}" in
    install)
        install_iron_mint
        ;;
    uninstall)
        uninstall_iron_mint
        ;;
    add)
        add_package "$2"
        ;;
    remove)
        remove_package "$2"
        ;;
    list)
        list_packages
        ;;
    update)
        update_iron_mint
        ;;
    sync)
        sync_iron_mint
        ;;
    rebuild)
        rebuild_iron_mint
        ;;
    edit)
        edit_iron_mint
        ;;
    status)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "‚ùå Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac